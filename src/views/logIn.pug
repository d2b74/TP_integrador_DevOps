extends index.pug

block content
  .container.mt-5
    .row.justify-content-center
      .col-md-4
        //- Título del formulario de inicio de sesión
        h3.text-center.mb-4 Login
        
        //- Formulario de inicio de sesión
        form#loginForm(action="/login" method="POST") 
          .mb-3
            label(for="correo") Email Address
            .input-group
              span.input-group-text
                i(class="bi bi-envelope")  
              input.form-control(type="email" name="correo" placeholder="Username@gmail.com" required)

          .mb-3
            label(for="password") Password
            .input-group
              span.input-group-text
                i(class="bi bi-lock")  
              input#password.form-control(type="password" name="password" placeholder="············" required)
              button#togglePassword.btn.btn-outline-secondary(type="button")
                i#toggleIcon.bi.bi-eye-slash

          //- Botón de Login
          button.btn.btn-primary.w-100(type="submit") Login
        

  //- JavaScript para mostrar/ocultar contraseña y manejar errores de login
  script.
    const togglePassword = document.querySelector('#togglePassword');
    const passwordField = document.querySelector('#password');
    const toggleIcon = document.querySelector('#toggleIcon');

    togglePassword.addEventListener('click', function () {
      // Cambiar el tipo de input entre 'password' y 'text'
      const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
      passwordField.setAttribute('type', type);

      // Cambiar el icono
      toggleIcon.classList.toggle('bi-eye');
      toggleIcon.classList.toggle('bi-eye-slash');
    });

    // Interceptar errores sin bloquear la redirección en caso de éxito
    document.querySelector('#loginForm').addEventListener('submit', async function (e) {
      e.preventDefault(); // Prevenir envío por defecto del formulario

      const formData = new FormData(this);
      const loginData = Object.fromEntries(formData);

      try {
        const response = await fetch(this.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(loginData)
        });

        if (!response.ok) {
          // Si la respuesta no es 200 OK, asumir que es un error
          const result = await response.json();

          // Mostrar el mensaje de error con alert
          if (result.errors && Array.isArray(result.errors)) {
            // Si hay errores de validación, se muestran todos los errores
            const errorMessages = result.errors.map(error => error.msg).join('\n');
            alert(`Errores de validación:\n${errorMessages}`);
          } else {
            // Mostrar el mensaje general
            alert(result.mensaje || 'Error desconocido');
          }
        } else {
          // Si es un éxito, permitir que la redirección del backend ocurra normalmente
          window.location.href = response.url;
        }
      } catch (error) {
        // Capturar cualquier otro error (por ejemplo, problemas de conexión)
        alert('Error de conexión. Intenta nuevamente.');
      }
    });
